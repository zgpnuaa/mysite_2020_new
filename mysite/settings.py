"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$xa^$)-zd%q84$d$fe#j_v!e$vawov*m3ryeg^eox4wuwrhgz&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',
    'rest_framework',
     # 自己的app要写在haystakc后面
    #'blog',
    'account',
    'password_reset',
    'article',
    'image',
    'sorl.thumbnail',
    'course',
    'social_django',
    'monitor',
    'notifications',
    'notice',
    'channels',
    'chat',
    'astrologychart',
    'wxtoken',
    'django_mysql',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # 内置安全机制，保护网站和用户通信安全
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话session功能
    'django.middleware.common.CommonMiddleware',        # 处理和规范化请求内容
    'django.middleware.csrf.CsrfViewMiddleware',    # 开启csrf防护功能
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 开启内置的用户认证系统
    'django.contrib.messages.middleware.MessageMiddleware',     # 开启内置的信息提示功能
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # 防止恶意程序点击劫持
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
# 在云服务器上用户：root，密码：zgp210317
DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_mydjango',
        'USER': 'root',
        'PASSWORD': 'zgp210317',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS':
            {
                'charset': 'utf8mb4',
            }
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),

)

LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/account/new-login/'

# 配置邮件发送服务器
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.163.com'
EMAIL_HOST_USER = "zgpnuaa@163.com"
# 此处的密码为163邮箱的客户端授权码，而非邮箱登录密码
# 授权码是用于登录第三方邮件客户端的专用密码。
# 适用于登录以下服务: POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务
EMAIL_HOST_PASSWORD = "zgp317210"
EMAIL_PORT = 25
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = "zgpnuaa@163.com"


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media', )

# 设置linux上传文件的权限为644（rw-r--r-- ），默认600（-rw-------）
# 参考（https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-FILE_UPLOAD_PERMISSIONS）
FILE_UPLOAD_PERMISSIONS = 0o644
# 默认上传文件大小是2.5M，小于时，放在内存中。大于时放在磁盘里。nginx也需设置client_max_body_size 500m(524288000B);
DATA_UPLOAD_MAX_MEMORY_SIZE = 524288000
FILE_UPLOAD_MAX_MEMORY_SIZE = 524288000

REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0

AUTHENTICATION_BACKENDS = (
    #'user.utils.UsernameModelBackend',
    'social_core.backends.weibo.WeiboOAuth2',
    'social_core.backends.qq.QQOAuth2',
    'social_core.backends.weixin.WeixinOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_URL_NAMESPACE = 'social'
SOCIAL_AUTH_TRAILING_SLASH = False
# 开放平台的APPID和SECRET
SOCIAL_AUTH_WEIBO_KEY = '3645454303'
SOCIAL_AUTH_WEIBO_SECRET = '9ebb839baf02e36068c8765dcd9f06e3'

# 注册成功后的跳转页面
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/account/get-userinfo/'
# SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/account/settings/'
SOCIAL_AUTH_LOGIN_ERROR_URL = '/account/settings/'
SOCIAL_AUTH_RAISE_EXCEPTIONS = False
# WEIBO_CALLBACK_URL = 'http://127.0.0.1:8000/oauth/weibo_check'

SOCIAL_AUTH_QQ_KEY = '101728923'
SOCIAL_AUTH_QQ_SECRET = '9b0a32c3f89ee4457245156603213a56'

SOCIAL_AUTH_WEIXIN_KEY = ''
SOCIAL_AUTH_WEIXIN_SECRET = ''

SOCIAL_AUTH_GITHUB_KEY = '23a39a750e58aefa092f'
SOCIAL_AUTH_GITHUB_SECRET = '25773a40551e4c9498d290857c0ad02b14c9b8ff'

# 配置haystack
HAYSTACK_CONNECTIONS = {
    'default': {
        # 设置搜索引擎，文件为article下的whoosh_cn_backend.py
        'ENGINE': 'article.whoosh_cn_backend.WhooshEngine',
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
        'INCLUDE_SPELLING': True,
    },
}

# 设置每页显示数量
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 6
# 当数据库更新时，会自动更新索引，非常方便
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

WSGI_APPLICATION = 'mysite.wsgi.application'
ASGI_APPLICATION = 'mysite.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100
}

MESSAGES_TO_LOAD = 15

BASE_LOG_DIR = os.path.join(BASE_DIR, "log")

LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 定义一个特殊的日志格式
        'collect': {
            'format': '%(message)s'
        }
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        # 在终端打印
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple',

        },
        # 默认的
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "liuhuadao_info.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 3,  # 最多备份几个
            'formatter': 'simple',
            'encoding': 'utf-8',
        },
        # 专门用来记错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "liuhuadao_err.log"),  # 日志文件
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'simple',
            'encoding': 'utf-8',
        },
        # 专门定义一个收集特定信息的日志
        'collect': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "liuhuadao_collect.log"),
            'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        }
    },
    'loggers': {
       # 默认的logger应用如下配置
        'django': {
            'handlers': ['console', 'default', 'error'],  # 上线之后可以把'console'移除
            'level': 'INFO',
            'propagate': True,  # 向不向更高级别的logger传递
        },
        # 名为 'collect'的logger还单独处理
        'collect': {
            'handlers': ['collect'],
            'level': 'DEBUG',
            'propagate': True,
        }
    },
}